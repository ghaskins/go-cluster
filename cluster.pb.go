// Code generated by protoc-gen-go.
// source: cluster.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	Negotiate
	Header
	Heartbeat
	Vote
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Type int32

const (
	Type_HEARTBEAT Type = 1
	Type_VOTE      Type = 2
)

var Type_name = map[int32]string{
	1: "HEARTBEAT",
	2: "VOTE",
}
var Type_value = map[string]int32{
	"HEARTBEAT": 1,
	"VOTE":      2,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}

type Negotiate struct {
	Magic            *string  `protobuf:"bytes,1,req,name=magic" json:"magic,omitempty"`
	Version          *int32   `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	Options          []string `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Negotiate) Reset()         { *m = Negotiate{} }
func (m *Negotiate) String() string { return proto.CompactTextString(m) }
func (*Negotiate) ProtoMessage()    {}

func (m *Negotiate) GetMagic() string {
	if m != nil && m.Magic != nil {
		return *m.Magic
	}
	return ""
}

func (m *Negotiate) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Negotiate) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type Header struct {
	Type             *Type  `protobuf:"varint,1,opt,name=type,enum=main.Type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}

func (m *Header) GetType() Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Type_HEARTBEAT
}

type Heartbeat struct {
	ViewId           *int64 `protobuf:"varint,1,opt,name=viewId" json:"viewId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}

func (m *Heartbeat) GetViewId() int64 {
	if m != nil && m.ViewId != nil {
		return *m.ViewId
	}
	return 0
}

type Vote struct {
	ViewId           *int64  `protobuf:"varint,1,opt,name=viewId" json:"viewId,omitempty"`
	PeerId           *string `protobuf:"bytes,2,opt,name=peerId" json:"peerId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}

func (m *Vote) GetViewId() int64 {
	if m != nil && m.ViewId != nil {
		return *m.ViewId
	}
	return 0
}

func (m *Vote) GetPeerId() string {
	if m != nil && m.PeerId != nil {
		return *m.PeerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Negotiate)(nil), "main.Negotiate")
	proto.RegisterType((*Header)(nil), "main.Header")
	proto.RegisterType((*Heartbeat)(nil), "main.Heartbeat")
	proto.RegisterType((*Vote)(nil), "main.Vote")
	proto.RegisterEnum("main.Type", Type_name, Type_value)
}
